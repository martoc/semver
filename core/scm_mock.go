// Code generated by MockGen. DO NOT EDIT.
// Source: scm.go

// Package core is a generated GoMock package.
package core

import (
	reflect "reflect"

	v5 "github.com/go-git/go-git/v5"
	plumbing "github.com/go-git/go-git/v5/plumbing"
	object "github.com/go-git/go-git/v5/plumbing/object"
	storer "github.com/go-git/go-git/v5/plumbing/storer"
	gomock "github.com/golang/mock/gomock"
)

// MockScm is a mock of Scm interface.
type MockScm struct {
	ctrl     *gomock.Controller
	recorder *MockScmMockRecorder
}

// MockScmMockRecorder is the mock recorder for MockScm.
type MockScmMockRecorder struct {
	mock *MockScm
}

// NewMockScm creates a new mock instance.
func NewMockScm(ctrl *gomock.Controller) *MockScm {
	mock := &MockScm{ctrl: ctrl}
	mock.recorder = &MockScmMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScm) EXPECT() *MockScmMockRecorder {
	return m.recorder
}

// GetCommitLog mocks base method.
func (m *MockScm) GetCommitLog() ([]*CommitLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommitLog")
	ret0, _ := ret[0].([]*CommitLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommitLog indicates an expected call of GetCommitLog.
func (mr *MockScmMockRecorder) GetCommitLog() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommitLog", reflect.TypeOf((*MockScm)(nil).GetCommitLog))
}

// MockGitRepo is a mock of GitRepo interface.
type MockGitRepo struct {
	ctrl     *gomock.Controller
	recorder *MockGitRepoMockRecorder
}

// MockGitRepoMockRecorder is the mock recorder for MockGitRepo.
type MockGitRepoMockRecorder struct {
	mock *MockGitRepo
}

// NewMockGitRepo creates a new mock instance.
func NewMockGitRepo(ctrl *gomock.Controller) *MockGitRepo {
	mock := &MockGitRepo{ctrl: ctrl}
	mock.recorder = &MockGitRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitRepo) EXPECT() *MockGitRepoMockRecorder {
	return m.recorder
}

// CommitObject mocks base method.
func (m *MockGitRepo) CommitObject(arg0 plumbing.Hash) (*object.Commit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitObject", arg0)
	ret0, _ := ret[0].(*object.Commit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitObject indicates an expected call of CommitObject.
func (mr *MockGitRepoMockRecorder) CommitObject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitObject", reflect.TypeOf((*MockGitRepo)(nil).CommitObject), arg0)
}

// Head mocks base method.
func (m *MockGitRepo) Head() (*plumbing.Reference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Head")
	ret0, _ := ret[0].(*plumbing.Reference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Head indicates an expected call of Head.
func (mr *MockGitRepoMockRecorder) Head() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Head", reflect.TypeOf((*MockGitRepo)(nil).Head))
}

// Log mocks base method.
func (m *MockGitRepo) Log(arg0 *v5.LogOptions) (object.CommitIter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Log", arg0)
	ret0, _ := ret[0].(object.CommitIter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Log indicates an expected call of Log.
func (mr *MockGitRepoMockRecorder) Log(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockGitRepo)(nil).Log), arg0)
}

// PlainOpen mocks base method.
func (m *MockGitRepo) PlainOpen(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlainOpen", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PlainOpen indicates an expected call of PlainOpen.
func (mr *MockGitRepoMockRecorder) PlainOpen(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlainOpen", reflect.TypeOf((*MockGitRepo)(nil).PlainOpen), arg0)
}

// Tags mocks base method.
func (m *MockGitRepo) Tags() (storer.ReferenceIter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tags")
	ret0, _ := ret[0].(storer.ReferenceIter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Tags indicates an expected call of Tags.
func (mr *MockGitRepoMockRecorder) Tags() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tags", reflect.TypeOf((*MockGitRepo)(nil).Tags))
}
